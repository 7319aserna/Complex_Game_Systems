// When the map gets initialized, information on door placement will be noted. (Keep track of how many rooms are being created and how many doors are being placed in each specific room)
// Note: I forgot that I am setting the bkg tiles which means that each loop will keep setting the tile. I need to only set it for the current map.
void door_Placement(door_Object *_door_Object_Array, int *_map_Index_Array, int _returned_Map_Width, unsigned char *_data, unsigned char *_room_Height_Array, unsigned char *_room_Width_Array){
    c_P_O_M = 0;

    for(door_Counter = 0; door_Counter < 81; door_Counter++){
        _door_Object_Array[door_Counter].door_Position[0] = -1; _door_Object_Array[door_Counter].door_Position[1] = -1;
        _door_Object_Array[door_Counter].direction = 'a';
        _door_Object_Array[door_Counter].map_Index = -1;
    }

    door_Counter = 0;

    // Set all the values in the _door_Object_Array to null. This will come in handy later on when checking for door placement.
    // This is because when the current room is checking to see if any other rooms are avaliable, if the next door_Object is null,
    // that means that the door is not in use.
    // Will check the current room to see if it's in use
    while(_map_Index_Array[c_P_O_M] != -1){
        // for(door_Counter = 0; door_Counter < 25; door_Counter++){ printf("Map Index Array[%d] = %d\n", door_Counter, _map_Index_Array[door_Counter]); delay(99); }
    
        // Check for rooms below the current room
        if(_map_Index_Array[c_P_O_M + _returned_Map_Width] != -1 /* && c_P_O_M + _returned_Map_Width < 25 */){
            // printf("There is a room below this one");
            // Place a door (Bottom Arrow)
            temporary_Returned_X_Value = randw() % _room_Width_Array[c_P_O_M]; temporary_Returned_Y_Value = randw() % _room_Height_Array[c_P_O_M]; 
            // printf("R.X.V = %d R.Y.V = %d\n", returned_X_Value, returned_Y_Value);
            temporary_Position_Marker = _room_Width_Array[c_P_O_M] * temporary_Returned_Y_Value + temporary_Returned_X_Value;
            // printf("Position Marker = %d\n", position_Marker);
            while(_data[temporary_Position_Marker] != blank_Tile[0]){
                temporary_Returned_X_Value = randw() % _room_Width_Array[c_P_O_M]; temporary_Returned_Y_Value = randw() % _room_Height_Array[c_P_O_M]; 
                temporary_Position_Marker = _room_Width_Array[c_P_O_M] * temporary_Returned_Y_Value + temporary_Returned_X_Value;
                
                // printf("R.X.V = %d R.Y.V = %d\n", temporary_Returned_X_Value, temporary_Returned_Y_Value);
                // printf("Position Marker = %d\n", temporary_Position_Marker);
                // delay(250);
            
                if(temporary_Position_Marker == 0){ break; }

                // For some unknown reason, this loop while repeat forever even though it should break out
                // To fix this, we need to save the last piece of information and set the targets to that information
                returned_X_Value = temporary_Returned_X_Value; returned_Y_Value = temporary_Returned_Y_Value; position_Marker = temporary_Position_Marker;
            }
            // When the map gets set up for the first time, this will only place the door tiles on the first map.
            if(c_P_O_M == current_Position_On_Map){ set_bkg_tiles(returned_X_Value, returned_Y_Value, 1, 1, &dungeon_Item_Tileset[/*6*/2]); }           
            
            // Record information on the door's properties
            door_Initilization(c_P_O_M, returned_X_Value, returned_Y_Value, &_door_Object_Array[door_Counter], 'd', _map_Index_Array[c_P_O_M]); 
            
            // printf("_door_Object_Array[%d]->door_Position[x] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[0]);
            // printf("_door_Object_Array[%d]->door_Position[y] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[1]);
            // printf("_door_Object_Array[%d]->map_Index = %d\n", door_Counter, _door_Object_Array[door_Counter].map_Index);

            door_Counter += 1;
        }

        // Check for rooms to the left of the current room
        // && _current_Position_On_Map - 1 != -1 (Makes sure that the current_Position_On_Map counter does not go out of bounds)
        if(_map_Index_Array[c_P_O_M - 1] != -1 && c_P_O_M - 1 != -1){
            // printf("There is a room to the left of this one");
            // Place a door (Left Arrow)
            temporary_Returned_X_Value = randw() % _room_Width_Array[c_P_O_M]; temporary_Returned_Y_Value = randw() % _room_Height_Array[c_P_O_M]; 
            // printf("R.X.V = %d R.Y.V = %d\n", returned_X_Value, returned_Y_Value);
            temporary_Position_Marker = _room_Width_Array[c_P_O_M] * temporary_Returned_Y_Value + temporary_Returned_X_Value;
            // printf("Position Marker = %d\n", position_Marker);
            while(_data[temporary_Position_Marker] != blank_Tile[0]){
                temporary_Returned_X_Value = randw() % _room_Width_Array[c_P_O_M]; temporary_Returned_Y_Value = randw() % _room_Height_Array[c_P_O_M]; 
                temporary_Position_Marker = _room_Width_Array[c_P_O_M] * temporary_Returned_Y_Value + temporary_Returned_X_Value;
                
                // printf("R.X.V = %d R.Y.V = %d\n", temporary_Returned_X_Value, temporary_Returned_Y_Value);
                // printf("Position Marker = %d\n", temporary_Position_Marker);
                // delay(250);
            
                if(temporary_Position_Marker == 0){ break; }

                // For some unknown reason, this loop while repeat forever even though it should break out
                // To fix this, we need to save the last piece of information and set the targets to that information
                returned_X_Value = temporary_Returned_X_Value; returned_Y_Value = temporary_Returned_Y_Value; position_Marker = temporary_Position_Marker;
            }
            if(c_P_O_M == current_Position_On_Map){ set_bkg_tiles(returned_X_Value, returned_Y_Value, 1, 1, &dungeon_Item_Tileset[3]); }
            
            // Record information on the door's properties
            door_Initilization(c_P_O_M, returned_X_Value, returned_Y_Value, &_door_Object_Array[door_Counter], 'l', _map_Index_Array[c_P_O_M]);

            // printf("_door_Object_Array[%d]->door_Position[x] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[0]);
            // printf("_door_Object_Array[%d]->door_Position[y] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[1]);
            // printf("_door_Object_Array[%d]->map_Index = %d\n", door_Counter, _door_Object_Array[door_Counter].map_Index);

            door_Counter += 1;
        }

        // Check for rooms to the right of the current room
        if(_map_Index_Array[c_P_O_M + 1] != -1 && c_P_O_M + 1 < 25 && width_Checker + 1 < _returned_Map_Width){
            // printf("There is a room to the right of this one");
            // Place a door (Right Arrow)
            temporary_Returned_X_Value = randw() % _room_Width_Array[c_P_O_M]; temporary_Returned_Y_Value = randw() % _room_Height_Array[c_P_O_M]; 
            // printf("R.X.V = %d R.Y.V = %d\n", returned_X_Value, returned_Y_Value);
            temporary_Position_Marker = _room_Width_Array[c_P_O_M] * temporary_Returned_Y_Value + temporary_Returned_X_Value;
            // printf("Position Marker = %d\n", position_Marker);
            while(_data[temporary_Position_Marker] != blank_Tile[0]){
                temporary_Returned_X_Value = randw() % _room_Width_Array[c_P_O_M]; temporary_Returned_Y_Value = randw() % _room_Height_Array[c_P_O_M]; 
                temporary_Position_Marker = _room_Width_Array[c_P_O_M] * temporary_Returned_Y_Value + temporary_Returned_X_Value;
                
                // printf("R.X.V = %d R.Y.V = %d\n", temporary_Returned_X_Value, temporary_Returned_Y_Value);
                // printf("Position Marker = %d\n", temporary_Position_Marker);
                // delay(250);
            
                if(temporary_Position_Marker == 0){ break; }

                // For some unknown reason, this loop while repeat forever even though it should break out
                // To fix this, we need to save the last piece of information and set the targets to that information
                returned_X_Value = temporary_Returned_X_Value; returned_Y_Value = temporary_Returned_Y_Value; position_Marker = temporary_Position_Marker;
            }
            if(c_P_O_M == current_Position_On_Map){ set_bkg_tiles(returned_X_Value, returned_Y_Value, 1, 1, &dungeon_Item_Tileset[4]); }

            // Record information on the door's properties
            door_Initilization(c_P_O_M, returned_X_Value, returned_Y_Value, &_door_Object_Array[door_Counter], 'r', _map_Index_Array[c_P_O_M]);

            // printf("_door_Object_Array[%d]->door_Position[x] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[0]);
            // printf("_door_Object_Array[%d]->door_Position[y] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[1]);
            // printf("_door_Object_Array[%d]->map_Index = %d\n", door_Counter, _door_Object_Array[door_Counter].map_Index);

            door_Counter += 1;
        }

        // Check for any rooms to the top of the current room
        if(_map_Index_Array[c_P_O_M - _returned_Map_Width] != -1 && c_P_O_M - _returned_Map_Width > 0){
            // printf("There is a room on top of this one");
            // Place a door (Top Arrow)
            temporary_Returned_X_Value = randw() % _room_Width_Array[c_P_O_M]; temporary_Returned_Y_Value = randw() % _room_Height_Array[c_P_O_M]; 
            // printf("R.X.V = %d R.Y.V = %d\n", returned_X_Value, returned_Y_Value);
            temporary_Position_Marker = _room_Width_Array[c_P_O_M] * temporary_Returned_Y_Value + temporary_Returned_X_Value;
            // printf("Position Marker = %d\n", position_Marker);
            while(_data[temporary_Position_Marker] != blank_Tile[0]){
                temporary_Returned_X_Value = randw() % _room_Width_Array[c_P_O_M]; temporary_Returned_Y_Value = randw() % _room_Height_Array[c_P_O_M]; 
                temporary_Position_Marker = _room_Width_Array[c_P_O_M] * temporary_Returned_Y_Value + temporary_Returned_X_Value;
                
                // printf("R.X.V = %d R.Y.V = %d\n", temporary_Returned_X_Value, temporary_Returned_Y_Value);
                // printf("Position Marker = %d\n", temporary_Position_Marker);
                // delay(250);
            
                if(temporary_Position_Marker == 0){ break; }

                // For some unknown reason, this loop while repeat forever even though it should break out
                // To fix this, we need to save the last piece of information and set the targets to that information
                returned_X_Value = temporary_Returned_X_Value; returned_Y_Value = temporary_Returned_Y_Value; position_Marker = temporary_Position_Marker;
            }
            if(c_P_O_M == current_Position_On_Map){ set_bkg_tiles(returned_X_Value, returned_Y_Value, 1, 1, &dungeon_Item_Tileset[5]); }
            
            // Record information on the door's properties
            door_Initilization(c_P_O_M, returned_X_Value, returned_Y_Value, &_door_Object_Array[door_Counter], 'u', _map_Index_Array[c_P_O_M]);

            // printf("_door_Object_Array[%d]->door_Position[x] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[0]);
            // printf("_door_Object_Array[%d]->door_Position[y] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[1]);
            // printf("_door_Object_Array[%d]->map_Index = %d\n", door_Counter, _door_Object_Array[door_Counter].map_Index);

            door_Counter += 1;
        }
        c_P_O_M += 1;
        //printf("c.P.O.M = %d\n", c_P_O_M);
    }
    // We are gonna be changing _current_Position_On_Map, so when all the doors have been set up, make sure to reset it back to Zero ( =
    c_P_O_M = 0;

    // for(door_Counter = 0; door_Counter < 81; door_Counter++){
    //     printf("_door_Object_Array[%d]->door_Position[x] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[0]);
    //     delay(9999);
    //     // printf("_door_Object_Array[%d]->door_Position[y] = %d\n", door_Counter, _door_Object_Array[door_Counter].door_Position[1]);
    //     // printf("_door_Object_Array[%d]->map_Index = %d\n", door_Counter, _door_Object_Array[door_Counter].map_Index);
    // }
}